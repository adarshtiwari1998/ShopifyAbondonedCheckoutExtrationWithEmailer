<!-- INTEGRATED SHOPIFY CART VALIDATION WITH CAPTCHA -->
<!-- This combines your existing $100 validation with automatic CAPTCHA validation -->

<!-- Enhanced Validation Modal with CAPTCHA Integration -->
<div id="validation-modal" class="modal-overlay" style="display: none;">
  <div class="modal-container">
    <div class="modal-header">
      <h3 class="modal-title">
        <span class="modal-icon">üõí</span>
        <span id="modal-title-text">Validating Your Order</span>
      </h3>
      <button class="modal-close" onclick="closeValidationModal()">&times;</button>
    </div>
    
    <div class="modal-body">
      <!-- Minimum Order Validation Section -->
      <div id="minimum-order-section" class="validation-section">
        <div class="validation-info">
          <div class="validation-item">
            <span class="label">Current Total:</span>
            <span class="value current-total">{{ cart.total_price | money }}</span>
          </div>
          <div class="validation-item">
            <span class="label">Required Minimum:</span>
            <span class="value minimum-required">{{ minimum_order_value | money }}</span>
          </div>
          <div class="validation-item highlight" id="amount-needed-section">
            <span class="label">Amount Needed:</span>
            <span class="value amount-needed">{{ minimum_order_value | minus: cart.total_price | money }}</span>
          </div>
        </div>
        
        <div class="security-info">
          <div class="security-badge">
            <span class="security-icon">üîê</span>
            <div class="security-text">
              <p><strong>Security Notice</strong></p>
              <p>This validation is enforced server-side and cannot be bypassed. Your cart must meet the minimum order requirement to proceed.</p>
            </div>
          </div>
        </div>
      </div>

      <!-- CAPTCHA Validation Section -->
      <div id="captcha-validation-section" class="validation-section" style="display: none;">
        <div class="captcha-info">
          <div class="validation-status" id="validation-status">
            <div class="validation-message" id="validation-message">üîç Validating your request...</div>
            <div class="validation-details" id="validation-details">Checking for security and location verification.</div>
          </div>
          
          <div id="captcha-container" class="captcha-container" style="display: none;">
            <div class="captcha-header">
              <strong>ü§ñ Security Verification Required</strong>
              <p>Please complete the verification to proceed to checkout:</p>
            </div>
            <div id="captcha-challenge" class="captcha-challenge">
              <div class="mock-captcha">
                <input type="checkbox" id="mock-captcha-checkbox" />
                <label for="mock-captcha-checkbox">I'm not a robot</label>
              </div>
            </div>
            <div class="captcha-actions">
              <button id="captcha-submit" class="btn btn-primary" disabled>Verify & Continue to Checkout</button>
              <button id="captcha-cancel" class="btn btn-secondary">Cancel</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Loading Section -->
      <div id="loading-section" class="validation-section" style="display: none;">
        <div class="loading-content">
          <div class="loading-spinner"></div>
          <p class="loading-text" id="loading-text">Validating your cart...</p>
          <p class="loading-subtext" id="loading-subtext">Please wait while we verify your order meets our requirements.</p>
        </div>
      </div>
    </div>
    
    <div class="modal-footer">
      <div id="minimum-order-actions">
        <button class="btn btn-primary" onclick="continueShoppingFromModal()">
          <span class="btn-icon">üõçÔ∏è</span>
          Continue Shopping
        </button>
        <button class="btn btn-secondary" onclick="closeValidationModal()">Cancel</button>
      </div>
      
      <div id="validation-success-actions" style="display: none;">
        <button class="btn btn-success" id="proceed-to-checkout" onclick="proceedToShopifyCheckout()">
          <span class="btn-icon">‚úÖ</span>
          Proceed to Secure Checkout
        </button>
        <button class="btn btn-secondary" onclick="closeValidationModal()">Cancel</button>
      </div>
    </div>
  </div>
</div>

<!-- Enhanced Styles for Integrated Validation -->
<style>
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.6);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 10000;
  font-family: Arial, sans-serif;
}

.modal-container {
  background: white;
  border-radius: 12px;
  padding: 0;
  max-width: 500px;
  width: 90%;
  max-height: 90vh;
  overflow-y: auto;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
}

.modal-header {
  padding: 20px;
  border-bottom: 1px solid #eee;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.modal-title {
  margin: 0;
  font-size: 18px;
  color: #333;
}

.modal-icon {
  margin-right: 10px;
}

.modal-close {
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: #666;
}

.modal-body {
  padding: 20px;
}

.validation-section {
  margin-bottom: 20px;
}

.validation-info {
  margin-bottom: 20px;
}

.validation-item {
  display: flex;
  justify-content: space-between;
  margin-bottom: 10px;
  padding: 8px 0;
}

.validation-item.highlight {
  background: #f8f9fa;
  padding: 12px;
  border-radius: 6px;
  border-left: 4px solid #ff6b6b;
}

.label {
  font-weight: bold;
  color: #333;
}

.value {
  color: #666;
}

.security-info {
  margin-top: 20px;
}

.security-badge {
  display: flex;
  align-items: flex-start;
  gap: 10px;
  padding: 15px;
  background: #e8f4fd;
  border: 1px solid #bee5eb;
  border-radius: 6px;
}

.security-icon {
  font-size: 20px;
}

.security-text p {
  margin: 0 0 5px 0;
  font-size: 14px;
  color: #0c5460;
}

/* Validation Status Styles */
.validation-status {
  margin: 20px 0;
  padding: 20px;
  border-radius: 8px;
  text-align: center;
}

.validation-status.loading {
  background: #e3f2fd;
  border: 2px solid #2196f3;
  color: #1565c0;
}

.validation-status.warning {
  background: #fff8e1;
  border: 2px solid #ff9800;
  color: #f57c00;
}

.validation-status.success {
  background: #e8f5e8;
  border: 2px solid #4caf50;
  color: #2e7d32;
}

.validation-status.error {
  background: #ffebee;
  border: 2px solid #f44336;
  color: #c62828;
}

.validation-message {
  font-size: 16px;
  font-weight: bold;
  margin-bottom: 10px;
}

.validation-details {
  font-size: 14px;
  margin-bottom: 15px;
}

/* CAPTCHA Styles */
.captcha-container {
  background: #f9f9f9;
  border: 1px solid #ddd;
  border-radius: 6px;
  padding: 20px;
  margin: 15px 0;
}

.captcha-header {
  margin-bottom: 15px;
  text-align: center;
}

.captcha-header strong {
  display: block;
  margin-bottom: 5px;
  color: #333;
}

.mock-captcha {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  margin: 20px 0;
  padding: 15px;
  border: 1px solid #ccc;
  border-radius: 4px;
  background: white;
}

.mock-captcha input[type="checkbox"] {
  transform: scale(1.2);
}

.captcha-actions {
  display: flex;
  gap: 10px;
  justify-content: center;
  margin-top: 15px;
}

/* Loading Styles */
.loading-content {
  text-align: center;
  padding: 30px 20px;
}

.loading-spinner {
  display: inline-block;
  width: 40px;
  height: 40px;
  border: 4px solid #f3f3f3;
  border-top: 4px solid #3498db;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 20px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.loading-text {
  font-size: 16px;
  font-weight: bold;
  margin: 10px 0 5px 0;
  color: #333;
}

.loading-subtext {
  font-size: 14px;
  color: #666;
  margin: 0;
}

/* Button Styles */
.modal-footer {
  padding: 20px;
  border-top: 1px solid #eee;
}

.btn {
  padding: 12px 24px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: bold;
  margin-right: 10px;
  display: inline-flex;
  align-items: center;
  gap: 8px;
}

.btn-primary {
  background: #007bff;
  color: white;
}

.btn-primary:hover {
  background: #0056b3;
}

.btn-primary:disabled {
  background: #ccc;
  cursor: not-allowed;
}

.btn-secondary {
  background: #6c757d;
  color: white;
}

.btn-secondary:hover {
  background: #545b62;
}

.btn-success {
  background: #28a745;
  color: white;
}

.btn-success:hover {
  background: #1e7e34;
}

.btn-icon {
  font-size: 16px;
}
</style>

<!-- Integrated JavaScript for Cart Validation + CAPTCHA -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Configuration
  const CONFIG = {
    API_BASE_URL: window.location.origin + '/api/validation',
    MINIMUM_CART_VALUE: {{ minimum_order_value }}, // Use your Shopify variable
    DEBUG_MODE: true
  };

  // State management
  const state = {
    minimumOrderValue: {{ minimum_order_value }},
    currentTotal: {{ cart.total_price }},
    cartItems: {{ cart.item_count }},
    sessionId: 'shopify-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9),
    validationId: null,
    isValidated: false,
    requiresCaptcha: false,
    cartChanged: false,
    autoReloadTimer: null
  };

  // DOM Elements
  const elements = {
    checkoutButton: document.getElementById('enhanced-checkout-btn'),
    stickyCheckoutBtn: document.getElementById('sticky-checkout-btn'),
    validationModal: document.getElementById('validation-modal'),
    minimumOrderSection: document.getElementById('minimum-order-section'),
    captchaValidationSection: document.getElementById('captcha-validation-section'),
    loadingSection: document.getElementById('loading-section'),
    minimumOrderActions: document.getElementById('minimum-order-actions'),
    validationSuccessActions: document.getElementById('validation-success-actions'),
    validationStatus: document.getElementById('validation-status'),
    validationMessage: document.getElementById('validation-message'),
    validationDetails: document.getElementById('validation-details'),
    captchaContainer: document.getElementById('captcha-container'),
    captchaCheckbox: document.getElementById('mock-captcha-checkbox'),
    captchaSubmit: document.getElementById('captcha-submit'),
    captchaCancel: document.getElementById('captcha-cancel'),
    modalTitleText: document.getElementById('modal-title-text'),
    loadingText: document.getElementById('loading-text'),
    loadingSubtext: document.getElementById('loading-subtext'),
    amountNeededSection: document.getElementById('amount-needed-section')
  };

  // Initialize the system
  init();

  function init() {
    setupQuantityMonitoring();
    setupEventListeners();
    if (CONFIG.DEBUG_MODE) {
      console.log('[Cart Validation] Initialized with session:', state.sessionId);
    }
  }

  function setupEventListeners() {
    // Main checkout button
    if (elements.checkoutButton) {
      elements.checkoutButton.addEventListener('click', handleCheckoutClick);
    }

    // Sticky checkout button
    if (elements.stickyCheckoutBtn) {
      elements.stickyCheckoutBtn.addEventListener('click', handleCheckoutClick);
    }

    // CAPTCHA events
    if (elements.captchaCheckbox) {
      elements.captchaCheckbox.addEventListener('change', function() {
        elements.captchaSubmit.disabled = !this.checked;
      });
    }

    if (elements.captchaSubmit) {
      elements.captchaSubmit.addEventListener('click', handleCaptchaSubmit);
    }

    if (elements.captchaCancel) {
      elements.captchaCancel.addEventListener('click', function() {
        showSection('minimum-order');
      });
    }
  }

  function handleCheckoutClick(event) {
    event.preventDefault();
    
    if (state.currentTotal < state.minimumOrderValue) {
      showMinimumOrderModal();
    } else {
      showValidationModal();
      startSecurityValidation();
    }
  }

  function showMinimumOrderModal() {
    elements.modalTitleText.textContent = 'Minimum Order Required';
    showSection('minimum-order');
    updateMinimumOrderDisplay();
    elements.validationModal.style.display = 'flex';
    document.body.style.overflow = 'hidden';
  }

  function showValidationModal() {
    elements.modalTitleText.textContent = 'Validating Your Order';
    showSection('loading');
    elements.validationModal.style.display = 'flex';
    document.body.style.overflow = 'hidden';
  }

  function showSection(sectionName) {
    // Hide all sections
    elements.minimumOrderSection.style.display = 'none';
    elements.captchaValidationSection.style.display = 'none';
    elements.loadingSection.style.display = 'none';
    elements.minimumOrderActions.style.display = 'none';
    elements.validationSuccessActions.style.display = 'none';

    // Show the requested section
    switch(sectionName) {
      case 'minimum-order':
        elements.minimumOrderSection.style.display = 'block';
        elements.minimumOrderActions.style.display = 'block';
        break;
      case 'captcha':
        elements.captchaValidationSection.style.display = 'block';
        break;
      case 'loading':
        elements.loadingSection.style.display = 'block';
        break;
      case 'success':
        elements.validationSuccessActions.style.display = 'block';
        break;
    }
  }

  function updateMinimumOrderDisplay() {
    const remaining = state.minimumOrderValue - state.currentTotal;
    if (remaining > 0) {
      elements.amountNeededSection.style.display = 'flex';
      document.querySelector('.amount-needed').textContent = '$' + (remaining / 100).toFixed(2);
    } else {
      elements.amountNeededSection.style.display = 'none';
    }
  }

  async function startSecurityValidation() {
    elements.loadingText.textContent = 'Validating your request...';
    elements.loadingSubtext.textContent = 'Checking for security and location verification.';

    try {
      const response = await fetch(`${CONFIG.API_BASE_URL}/validate-user`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          sessionId: state.sessionId,
          cartValue: state.currentTotal,
          cartItems: state.cartItems,
          userAgent: navigator.userAgent
        })
      });

      const result = await response.json();
      
      if (!response.ok) {
        throw new Error(result.error || 'Validation failed');
      }

      state.validationId = result.validationId;
      state.requiresCaptcha = result.requiresCaptcha;

      if (result.blocked) {
        showValidationStatus('error', 'üö´ Access Denied', 
          'Your request has been blocked due to security concerns. Please contact support if you believe this is an error.');
      } else if (result.requiresCaptcha) {
        showCaptchaValidation(result);
      } else if (result.isValid) {
        showValidationStatus('success', '‚úÖ Validation Successful', 
          `Verified from ${result.location?.city || 'Unknown'}, ${result.location?.country || 'Unknown'}. You may proceed to checkout.`);
        setTimeout(() => {
          proceedToShopifyCheckout();
        }, 2000);
      }

    } catch (error) {
      console.error('Validation error:', error);
      showValidationStatus('warning', '‚ö†Ô∏è Validation Service Unavailable', 
        'Proceeding with basic validation only. Advanced security features are temporarily unavailable.');
      setTimeout(() => {
        proceedToShopifyCheckout();
      }, 2000);
    }
  }

  function showCaptchaValidation(result) {
    elements.modalTitleText.textContent = 'Security Verification Required';
    showSection('captcha');
    
    showValidationStatus('warning', 'üõ°Ô∏è Security Verification Required', 
      `Location: ${result.location?.city || 'Unknown'}, ${result.location?.country || 'Unknown'} | Risk Score: ${result.riskScore}`);
    
    elements.captchaContainer.style.display = 'block';
    elements.captchaCheckbox.checked = false;
    elements.captchaSubmit.disabled = true;
  }

  function showValidationStatus(type, message, details = '') {
    elements.validationStatus.className = `validation-status ${type}`;
    elements.validationMessage.textContent = message;
    elements.validationDetails.textContent = details;

    if (CONFIG.DEBUG_MODE) {
      console.log('[Cart Validation]', type, message, details);
    }
  }

  async function handleCaptchaSubmit() {
    try {
      elements.loadingText.textContent = 'Verifying CAPTCHA...';
      elements.loadingSubtext.textContent = 'Please wait while we verify your response.';
      showSection('loading');

      const response = await fetch(`${CONFIG.API_BASE_URL}/captcha`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          validationId: state.validationId,
          captchaResponse: 'mock-captcha-response-' + Date.now(),
          captchaType: 'mock'
        })
      });

      const result = await response.json();

      if (result.success) {
        showValidationStatus('success', '‚úÖ Verification Complete', 
          'CAPTCHA verified successfully. You may now proceed to checkout.');
        state.isValidated = true;
        
        // Track the validation success
        await trackCheckoutProceed();
        
        setTimeout(() => {
          proceedToShopifyCheckout();
        }, 2000);
      } else {
        showSection('captcha');
        showValidationStatus('error', '‚ùå Verification Failed', 
          'CAPTCHA verification failed. Please try again.');
        elements.captchaCheckbox.checked = false;
        elements.captchaSubmit.disabled = true;
      }

    } catch (error) {
      console.error('CAPTCHA verification error:', error);
      showSection('captcha');
      showValidationStatus('error', '‚ö†Ô∏è Verification Error', 
        'Unable to verify CAPTCHA. Please try again or contact support.');
    }
  }

  async function trackCheckoutProceed() {
    try {
      await fetch(`${CONFIG.API_BASE_URL}/proceed-checkout`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          validationId: state.validationId,
          sessionId: state.sessionId
        })
      });
    } catch (error) {
      console.error('Failed to track checkout proceed:', error);
    }
  }

  function proceedToShopifyCheckout() {
    // Generate security token
    const timestamp = Date.now();
    const cartData = {
      total: state.currentTotal,
      items: state.cartItems,
      session: state.sessionId
    };
    const securityToken = btoa(JSON.stringify({ ...cartData, timestamp }));

    // Log checkout attempt for security monitoring
    console.log('[SECURITY] Checkout initiated with validation token:', securityToken.slice(0, 20) + '...');

    // Redirect to Shopify checkout
    window.location.href = '/checkout';
  }

  // Quantity monitoring (from your existing code)
  function setupQuantityMonitoring() {
    const quantityInputs = document.querySelectorAll('.quantity-input');
    const updateCartBtn = document.getElementById('update-cart-btn');
    const updateCartIndicator = document.getElementById('update-cart-indicator');

    quantityInputs.forEach(input => {
      const originalValue = input.dataset.originalValue;

      input.addEventListener('input', function() {
        const currentValue = this.value;
        const hasChanged = currentValue !== originalValue;

        if (hasChanged) {
          state.cartChanged = true;
          this.classList.add('changed');
          showUpdateIndicator();
          setupAutoReload();
        } else {
          this.classList.remove('changed');
          checkIfAnyChanges();
        }
      });
    });

    function showUpdateIndicator() {
      if (updateCartBtn) {
        updateCartBtn.classList.add('cart-changed');
      }
      if (updateCartIndicator) {
        updateCartIndicator.style.display = 'block';
      }
    }

    function checkIfAnyChanges() {
      const changedInputs = document.querySelectorAll('.quantity-input.changed');
      if (changedInputs.length === 0) {
        state.cartChanged = false;
        if (updateCartBtn) {
          updateCartBtn.classList.remove('cart-changed');
        }
        if (updateCartIndicator) {
          updateCartIndicator.style.display = 'none';
        }
        clearAutoReload();
      }
    }

    function setupAutoReload() {
      clearAutoReload();
      state.autoReloadTimer = setTimeout(() => {
        if (state.cartChanged) {
          console.log('Auto-reloading cart due to changes...');
          const cartForm = document.getElementById('enhanced-cart-form');
          if (cartForm) {
            cartForm.submit();
          }
        }
      }, 5000);
    }

    function clearAutoReload() {
      if (state.autoReloadTimer) {
        clearTimeout(state.autoReloadTimer);
        state.autoReloadTimer = null;
      }
    }
  }

  // Global functions for modal controls
  window.closeValidationModal = function() {
    elements.validationModal.style.display = 'none';
    document.body.style.overflow = 'auto';
  };

  window.continueShoppingFromModal = function() {
    closeValidationModal();
    window.location.href = '/collections/all';
  };

  window.proceedToShopifyCheckout = proceedToShopifyCheckout;

  // Security features (from your existing code)
  document.addEventListener('keydown', function(e) {
    if (e.key === 'F12' || 
        (e.ctrlKey && e.shiftKey && (e.key === 'I' || e.key === 'C' || e.key === 'J')) ||
        (e.ctrlKey && e.key === 'U')) {
      e.preventDefault();
      console.warn('[SECURITY] Developer tools access attempt detected');
    }
  });

  // Monitor for tampering attempts
  const originalConsoleLog = console.log;
  console.log = function(...args) {
    if (args.some(arg => typeof arg === 'string' && arg.includes('minimum'))) {
      console.warn('[SECURITY] Potential tampering attempt detected');
    }
    originalConsoleLog.apply(console, args);
  };
});
</script>

<!-- END INTEGRATED SHOPIFY CART VALIDATION -->