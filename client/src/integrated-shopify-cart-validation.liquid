<!-- INTEGRATED SHOPIFY CART VALIDATION WITH REAL GOOGLE reCAPTCHA -->
<!-- This combines your existing $100 validation with real Google reCAPTCHA validation -->

<!-- Load Google reCAPTCHA Enterprise API (site key will be loaded dynamically) -->
<script id="recaptcha-script"></script>

<!-- Enhanced Validation Modal with Real reCAPTCHA Integration -->
<div id="flsvalidation-modal" class="flsvalidation-modal-overlay" style="display: none;">
  <div class="flsvalidation-modal-container">
    <div class="flsvalidation-modal-header">
      <h3 class="flsvalidation-modal-title">
        <span class="flsvalidation-modal-icon">üõí</span>
        <span id="flsvalidation-modal-title-text">Validating Your Order</span>
      </h3>
      <button class="flsvalidation-modal-close" onclick="closeValidationModal()">&times;</button>
    </div>
    
    <div class="flsvalidation-modal-body">
      <!-- Minimum Order Validation Section -->
      <div id="flsvalidation-minimum-order-section" class="flsvalidation-validation-section">
        <div class="flsvalidation-validation-info">
          <div class="flsvalidation-validation-item">
            <span class="flsvalidation-label">Current Total:</span>
            <span class="flsvalidation-value flsvalidation-current-total">{{ cart.total_price | money }}</span>
          </div>
          <div class="flsvalidation-validation-item">
            <span class="flsvalidation-label">Required Minimum:</span>
            <span class="flsvalidation-value flsvalidation-minimum-required">{{ minimum_order_value | money }}</span>
          </div>
          <div class="flsvalidation-validation-item flsvalidation-highlight" id="flsvalidation-amount-needed-section">
            <span class="flsvalidation-label">Amount Needed:</span>
            <span class="flsvalidation-value flsvalidation-amount-needed">{{ minimum_order_value | minus: cart.total_price | money }}</span>
          </div>
        </div>
        
        <div class="flsvalidation-security-info">
          <div class="flsvalidation-security-badge">
            <span class="flsvalidation-security-icon">üîê</span>
            <div class="flsvalidation-security-text">
              <p><strong>Security Notice</strong></p>
              <p>This validation is enforced server-side and cannot be bypassed. Your cart must meet the minimum order requirement to proceed.</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Auto-Verification Security Section -->
      <div id="flsvalidation-captcha-validation-section" class="flsvalidation-validation-section" style="display: none;">
        <div class="flsvalidation-security-verification">
          <div class="flsvalidation-validation-status" id="flsvalidation-validation-status">
            <div class="flsvalidation-validation-message" id="flsvalidation-validation-message">üîí Securing your checkout...</div>
            <div class="flsvalidation-validation-details" id="flsvalidation-validation-details">Running advanced security verification.</div>
          </div>
          
          <!-- Auto Progress Indicator -->
          <div class="flsvalidation-progress-container">
            <div class="flsvalidation-progress-bar">
              <div class="flsvalidation-progress-fill" id="flsvalidation-progress-fill"></div>
            </div>
            <div class="flsvalidation-progress-steps">
              <div class="flsvalidation-step active" id="step-1">Checking cart</div>
              <div class="flsvalidation-step" id="step-2">Security verification</div>
              <div class="flsvalidation-step" id="step-3">You're all set!</div>
            </div>
          </div>
          
          <!-- Minimal Trust Indicators -->
          <div class="flsvalidation-trust-panel">
            <div class="flsvalidation-trust-item">
              <span class="flsvalidation-trust-icon">üîê</span>
              <span>Protected by Google reCAPTCHA Enterprise</span>
            </div>
            <div class="flsvalidation-trust-item">
              <span class="flsvalidation-trust-icon">üõ°Ô∏è</span>
              <span>SSL secured checkout</span>
            </div>
            <div class="flsvalidation-trust-item">
              <span class="flsvalidation-trust-icon">üí≥</span>
              <span>No charge until order confirms</span>
            </div>
          </div>
          
          <!-- reCAPTCHA Container (Same as working version) -->
          <div id="flsvalidation-captcha-container" class="flsvalidation-captcha-container" style="display: none;">
            <div class="flsvalidation-captcha-header">
              <strong>ü§ñ Security Verification Required</strong>
              <p>Please complete the reCAPTCHA verification to proceed to checkout:</p>
            </div>
            <div id="flsvalidation-captcha-challenge" class="flsvalidation-captcha-challenge">
              <!-- Google reCAPTCHA v2 Checkbox Widget -->
              <div class="flsvalidation-recaptcha-widget">
                <div id="flsvalidation-recaptcha-container"></div>
              </div>
              <!-- Fallback for reCAPTCHA Enterprise invisible mode -->
              <div class="flsvalidation-enterprise-info" id="flsvalidation-enterprise-fallback" style="display: none;">
                <p>üõ°Ô∏è Running advanced security verification...</p>
                <button id="flsvalidation-enterprise-verify" class="flsvalidation-btn flsvalidation-btn-primary">Verify & Continue</button>
              </div>
            </div>
            <div class="flsvalidation-captcha-actions">
              <button id="flsvalidation-captcha-submit" class="flsvalidation-btn flsvalidation-btn-primary" disabled>Verify & Continue to Checkout</button>
              <button id="flsvalidation-captcha-cancel" class="flsvalidation-btn flsvalidation-btn-secondary">Cancel</button>
            </div>
          </div>
          
          <!-- Manual Verification Fallback (Only shown if needed) -->
          <div id="flsvalidation-manual-verification" class="flsvalidation-manual-verification" style="display: none;">
            <div class="flsvalidation-manual-header">
              <strong>üõ°Ô∏è Additional Verification Required</strong>
              <p>For your security, please complete this quick verification:</p>
            </div>
            <div id="flsvalidation-manual-captcha" class="flsvalidation-manual-captcha"></div>
            <div class="flsvalidation-manual-actions">
              <button id="flsvalidation-manual-submit" class="flsvalidation-btn flsvalidation-btn-primary" disabled>Complete Verification</button>
              <button id="flsvalidation-manual-retry" class="flsvalidation-btn flsvalidation-btn-secondary">Try Again</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Success Section -->
      <div id="flsvalidation-success-section" class="flsvalidation-validation-section" style="display: none;">
        <div class="flsvalidation-success-content">
          <div class="flsvalidation-success-icon">‚úÖ</div>
          <div class="flsvalidation-success-message">Securely verified!</div>
          <div class="flsvalidation-success-details">Redirecting to checkout...</div>
          <div class="flsvalidation-success-actions">
            <button id="flsvalidation-proceed-now" class="flsvalidation-btn flsvalidation-btn-primary">Proceed Now</button>
          </div>
        </div>
      </div>
      
      <!-- Loading Section -->
      <div id="flsvalidation-loading-section" class="flsvalidation-validation-section" style="display: none;">
        <div class="flsvalidation-loading-content">
          <div class="flsvalidation-loading-spinner"></div>
          <p class="flsvalidation-loading-text" id="flsvalidation-loading-text">Validating your cart...</p>
          <p class="flsvalidation-loading-subtext" id="flsvalidation-loading-subtext">Please wait while we verify your order meets our requirements.</p>
        </div>
      </div>
    </div>
    
    <div class="flsvalidation-modal-footer">
      <div id="flsvalidation-minimum-order-actions">
        <button class="flsvalidation-btn flsvalidation-btn-primary" onclick="continueShoppingFromModal()">
          <span class="flsvalidation-btn-icon">üõçÔ∏è</span>
          Continue Shopping
        </button>
        <button class="flsvalidation-btn flsvalidation-btn-secondary" onclick="closeValidationModal()">Cancel</button>
      </div>
      
      <div id="flsvalidation-validation-success-actions" style="display: none;">
        <button class="flsvalidation-btn flsvalidation-btn-success" id="flsvalidation-proceed-to-checkout" onclick="proceedToShopifyCheckout()">
          <span class="flsvalidation-btn-icon">‚úÖ</span>
          Proceed to Secure Checkout
        </button>
        <button class="flsvalidation-btn flsvalidation-btn-secondary" onclick="closeValidationModal()">Cancel</button>
      </div>
    </div>
  </div>
</div>

<!-- Scoped Styles for FLS Validation - No Global Conflicts -->
<style>
.flsvalidation-modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.6);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 10000;
  font-family: Arial, sans-serif;
}

.flsvalidation-modal-container {
  background: white;
  border-radius: 12px;
  padding: 0;
  max-width: 500px;
  width: 90%;
  max-height: 90vh;
  overflow-y: auto;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
}

.flsvalidation-modal-header {
  padding: 20px;
  border-bottom: 1px solid #eee;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.flsvalidation-modal-title {
  margin: 0;
  font-size: 18px;
  color: #333;
}

.flsvalidation-modal-icon {
  margin-right: 10px;
}

.flsvalidation-modal-close {
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: #666;
}

.flsvalidation-modal-body {
  padding: 20px;
}

.flsvalidation-validation-section {
  margin-bottom: 20px;
}

.flsvalidation-validation-info {
  margin-bottom: 20px;
}

.flsvalidation-validation-item {
  display: flex;
  justify-content: space-between;
  margin-bottom: 10px;
  padding: 8px 0;
}

.flsvalidation-validation-item.flsvalidation-highlight {
  background: #f8f9fa;
  padding: 12px;
  border-radius: 6px;
  border-left: 4px solid #0071b9;
}

.flsvalidation-label {
  font-weight: bold;
  color: #333;
}

.flsvalidation-value {
  color: #666;
}

.flsvalidation-security-info {
  margin-top: 20px;
}

.flsvalidation-security-badge {
  display: flex;
  align-items: flex-start;
  gap: 10px;
  padding: 15px;
  background: #e8f4fd;
  border: 1px solid #bee5eb;
  border-radius: 6px;
}

.flsvalidation-security-icon {
  font-size: 20px;
}

.flsvalidation-security-text p {
  margin: 0 0 5px 0;
  font-size: 14px;
  color: #0c5460;
}

/* Validation Status Styles */
.flsvalidation-validation-status {
  margin: 20px 0;
  padding: 20px;
  border-radius: 8px;
  text-align: center;
}

.flsvalidation-validation-status.flsvalidation-loading {
  background: #e6f3ff;
  border: 2px solid #0071b9;
  color: #005c95;
}

.flsvalidation-validation-status.flsvalidation-warning {
  background: #fff8e1;
  border: 2px solid #ff9800;
  color: #f57c00;
}

.flsvalidation-validation-status.flsvalidation-success {
  background: #e8f5e8;
  border: 2px solid #4caf50;
  color: #2e7d32;
}

.flsvalidation-validation-status.flsvalidation-error {
  background: #ffebee;
  border: 2px solid #f44336;
  color: #c62828;
}

.flsvalidation-validation-message {
  font-size: 16px;
  font-weight: bold;
  margin-bottom: 10px;
}

.flsvalidation-validation-details {
  font-size: 14px;
  margin-bottom: 15px;
}

/* Real reCAPTCHA Styles */
.flsvalidation-captcha-container {
  background: #f9f9f9;
  border: 1px solid #ddd;
  border-radius: 6px;
  padding: 20px;
  margin: 15px 0;
}

/* reCAPTCHA Widget Styling */
.flsvalidation-recaptcha-widget {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 20px 0;
  padding: 10px;
}

#flsvalidation-recaptcha-container {
  margin: 0 auto;
}

/* Center the reCAPTCHA widget */
.flsvalidation-recaptcha-widget iframe {
  margin: 0 auto !important;
}

.flsvalidation-captcha-header {
  margin-bottom: 15px;
  text-align: center;
}

.flsvalidation-captcha-header strong {
  display: block;
  margin-bottom: 5px;
  color: #333;
}

.mock-captcha {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  margin: 20px 0;
  padding: 15px;
  border: 1px solid #ccc;
  border-radius: 4px;
  background: white;
}

.mock-captcha input[type="checkbox"] {
  transform: scale(1.2);
}

.captcha-actions {
  display: flex;
  gap: 10px;
  justify-content: center;
  margin-top: 15px;
}

/* Loading Styles */
.loading-content {
  text-align: center;
  padding: 30px 20px;
}

.flsvalidation-loading-spinner {
  display: inline-block;
  width: 40px;
  height: 40px;
  border: 4px solid #f3f3f3;
  border-top: 4px solid #0071b9;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 20px;
}

/* Progress Bar Styles */
.flsvalidation-progress-container {
  margin: 30px 0;
}

.flsvalidation-progress-bar {
  width: 100%;
  height: 6px;
  background: #e9ecef;
  border-radius: 3px;
  overflow: hidden;
  margin-bottom: 20px;
}

.flsvalidation-progress-fill {
  height: 100%;
  background: linear-gradient(90deg, #0071b9, #009be7);
  width: 0%;
  transition: width 0.8s ease;
  border-radius: 3px;
}

.flsvalidation-progress-steps {
  display: flex;
  justify-content: space-between;
  font-size: 14px;
}

.flsvalidation-step {
  color: #999;
  transition: color 0.3s ease;
}

.flsvalidation-step.active {
  color: #0071b9;
  font-weight: 600;
}

.flsvalidation-step.completed {
  color: #28a745;
}

/* Trust Panel Styles */
.flsvalidation-trust-panel {
  margin: 25px 0;
  padding: 20px;
  background: #f8f9fa;
  border-radius: 8px;
  border: 1px solid #e9ecef;
}

.flsvalidation-trust-item {
  display: flex;
  align-items: center;
  gap: 12px;
  margin-bottom: 12px;
  font-size: 14px;
  color: #666;
}

.flsvalidation-trust-item:last-child {
  margin-bottom: 0;
}

.flsvalidation-trust-icon {
  font-size: 16px;
  color: #0071b9;
}

/* Success Section Styles */
.flsvalidation-success-content {
  text-align: center;
  padding: 40px 20px;
}

.flsvalidation-success-icon {
  font-size: 64px;
  margin-bottom: 20px;
  animation: successPulse 0.6s ease-out;
}

@keyframes successPulse {
  0% {
    transform: scale(0);
  }
  50% {
    transform: scale(1.1);
  }
  100% {
    transform: scale(1);
  }
}

.flsvalidation-success-message {
  font-size: 24px;
  font-weight: bold;
  color: #28a745;
  margin-bottom: 10px;
}

.flsvalidation-success-details {
  font-size: 16px;
  color: #666;
  margin-bottom: 30px;
}

.flsvalidation-success-actions {
  margin-top: 20px;
}

/* Manual Verification Styles */
.flsvalidation-manual-verification {
  margin-top: 20px;
  padding: 20px;
  background: #fff8e1;
  border: 1px solid #ffcc02;
  border-radius: 8px;
}

.flsvalidation-manual-header {
  text-align: center;
  margin-bottom: 20px;
}

.flsvalidation-manual-header strong {
  display: block;
  margin-bottom: 8px;
  color: #f57c00;
}

.flsvalidation-manual-captcha {
  display: flex;
  justify-content: center;
  margin: 20px 0;
}

.flsvalidation-manual-actions {
  display: flex;
  gap: 10px;
  justify-content: center;
  margin-top: 20px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.loading-text {
  font-size: 16px;
  font-weight: bold;
  margin: 10px 0 5px 0;
  color: #333;
}

.loading-subtext {
  font-size: 14px;
  color: #666;
  margin: 0;
}

/* Button Styles - All properly scoped with flsvalidation prefix */
.flsvalidation-modal-footer {
  padding: 20px;
  border-top: 1px solid #eee;
}

.flsvalidation-btn {
  padding: 12px 24px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: bold;
  margin-right: 10px;
  display: inline-flex;
  align-items: center;
  gap: 8px;
}

.flsvalidation-btn-primary {
  background: #0071b9;
  color: white;
  transition: all 0.3s ease;
}

.flsvalidation-btn-primary:hover {
  background: #005c95;
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0, 113, 185, 0.3);
}

.flsvalidation-btn-primary:disabled {
  background: #ccc;
  cursor: not-allowed;
}

.flsvalidation-btn-secondary {
  background: #6c757d;
  color: white;
}

.flsvalidation-btn-secondary:hover {
  background: #545b62;
}

.flsvalidation-btn-success {
  background: #28a745;
  color: white;
}

.flsvalidation-btn-success:hover {
  background: #1e7e34;
}

.flsvalidation-btn-icon {
  font-size: 16px;
}

  
</style>

<!-- Integrated JavaScript for Cart Validation + CAPTCHA -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Configuration (will be loaded dynamically from server)
  let CONFIG = {
    API_BASE_URL: 'https://63a4699b-0150-4ab2-8d49-9f3f41731065-00-3hg8w7sa7r81k.sisko.replit.dev/api/validation',
    MINIMUM_CART_VALUE: {{ minimum_order_value }}, // Use your Shopify variable
    DEBUG_MODE: false, // Set to false for production
    SITE_KEY: null // Will be loaded securely from server
  };

  // State management
  const state = {
    minimumOrderValue: {{ minimum_order_value }},
    currentTotal: {{ cart.total_price }},
    cartItems: {{ cart.item_count }},
    sessionId: 'shopify-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9),
    validationId: null,
    isValidated: false,
    requiresCaptcha: false,
    cartChanged: false,
    autoReloadTimer: null
  };

  // DOM Elements with scoped IDs
  const elements = {
    checkoutButton: document.getElementById('enhanced-checkout-btn'),
    stickyCheckoutBtn: document.getElementById('sticky-checkout-btn'),
    validationModal: document.getElementById('flsvalidation-modal'),
    minimumOrderSection: document.getElementById('flsvalidation-minimum-order-section'),
    captchaValidationSection: document.getElementById('flsvalidation-captcha-validation-section'),
    loadingSection: document.getElementById('flsvalidation-loading-section'),
    successSection: document.getElementById('flsvalidation-success-section'),
    minimumOrderActions: document.getElementById('flsvalidation-minimum-order-actions'),
    validationSuccessActions: document.getElementById('flsvalidation-validation-success-actions'),
    validationStatus: document.getElementById('flsvalidation-validation-status'),
    validationMessage: document.getElementById('flsvalidation-validation-message'),
    validationDetails: document.getElementById('flsvalidation-validation-details'),
    captchaContainer: document.getElementById('flsvalidation-captcha-container'),
    captchaSubmit: document.getElementById('flsvalidation-captcha-submit'),
    captchaCancel: document.getElementById('flsvalidation-captcha-cancel'),
    enterpriseVerify: document.getElementById('flsvalidation-enterprise-verify'),
    progressFill: document.getElementById('flsvalidation-progress-fill'),
    step1: document.getElementById('step-1'),
    step2: document.getElementById('step-2'),
    step3: document.getElementById('step-3'),
    manualVerification: document.getElementById('flsvalidation-manual-verification'),
    manualCaptcha: document.getElementById('flsvalidation-manual-captcha'),
    manualSubmit: document.getElementById('flsvalidation-manual-submit'),
    manualRetry: document.getElementById('flsvalidation-manual-retry'),
    proceedNow: document.getElementById('flsvalidation-proceed-now'),
    modalTitleText: document.getElementById('flsvalidation-modal-title-text'),
    loadingText: document.getElementById('flsvalidation-loading-text'),
    loadingSubtext: document.getElementById('flsvalidation-loading-subtext'),
    amountNeededSection: document.getElementById('flsvalidation-amount-needed-section')
  };

  // Global variables for reCAPTCHA Enterprise
  window.flsvalidationRecaptchaResponse = null;
  let RECAPTCHA_SITE_KEY = null; // Will be loaded securely from server

  // Initialize the system
  init();

  async function init() {
    // Load configuration securely from server
    await loadConfiguration();
    setupQuantityMonitoring();
    setupEventListeners();
    if (CONFIG.DEBUG_MODE) {
      console.log('[Cart Validation] Initialized with session:', state.sessionId);
    }
  }

  async function loadConfiguration() {
    try {
      const response = await fetch(`${CONFIG.API_BASE_URL}/config`, {
        method: 'GET',
        credentials: 'omit' // Don't send cookies for config request
      });
      
      if (response.ok) {
        const config = await response.json();
        RECAPTCHA_SITE_KEY = config.siteKey;
        CONFIG.SITE_KEY = config.siteKey;
        
        // Load reCAPTCHA Enterprise script for checkbox widget
        if (RECAPTCHA_SITE_KEY) {
          const script = document.createElement('script');
          // Use explicit render for checkbox widget with auto-check capability
          script.src = 'https://www.google.com/recaptcha/enterprise.js?render=explicit';
          script.async = true;
          script.defer = true;
          script.onload = () => {
            if (CONFIG.DEBUG_MODE) {
              console.log('[Cart Validation] reCAPTCHA Enterprise script loaded for checkbox widget');
            }
          };
          document.head.appendChild(script);
        }
      } else {
        console.warn('[Cart Validation] Could not load secure configuration, using fallback');
      }
    } catch (error) {
      console.error('[Cart Validation] Configuration load error:', error);
    }
  }

  function setupEventListeners() {
    // Main checkout button
    if (elements.checkoutButton) {
      elements.checkoutButton.addEventListener('click', handleCheckoutClick);
    }

    // Sticky checkout button
    if (elements.stickyCheckoutBtn) {
      elements.stickyCheckoutBtn.addEventListener('click', handleCheckoutClick);
    }

    // New UI event listeners
    // reCAPTCHA widget events  
    if (elements.captchaSubmit) {
      elements.captchaSubmit.addEventListener('click', () => handleCaptchaSubmit());
    }
    
    if (elements.captchaCancel) {
      elements.captchaCancel.addEventListener('click', () => {
        startSecurityValidation(); // Retry validation
      });
    }
    
    if (elements.enterpriseVerify) {
      elements.enterpriseVerify.addEventListener('click', () => handleEnterpriseVerify());
    }
    
    if (elements.manualSubmit) {
      elements.manualSubmit.addEventListener('click', () => handleManualCaptchaSubmit());
    }
    
    if (elements.manualRetry) {
      elements.manualRetry.addEventListener('click', () => {
        elements.manualVerification.style.display = 'none';
        startSecurityValidation();
      });
    }
    
    if (elements.proceedNow) {
      elements.proceedNow.addEventListener('click', () => proceedToShopifyCheckout());
    }
  }

  function handleCheckoutClick(event) {
    event.preventDefault();
    
    if (state.currentTotal < state.minimumOrderValue) {
      showMinimumOrderModal();
    } else {
      showValidationModal();
      startSecurityValidation();
    }
  }

  function showMinimumOrderModal() {
    elements.modalTitleText.textContent = 'Minimum Order Required';
    showSection('minimum-order');
    updateMinimumOrderDisplay();
    elements.validationModal.style.display = 'flex';
    document.body.style.overflow = 'hidden';
  }

  function showValidationModal() {
    elements.modalTitleText.textContent = 'Validating Your Order';
    showSection('loading');
    elements.validationModal.style.display = 'flex';
    document.body.style.overflow = 'hidden';
  }

  function showSection(sectionName) {
    // Hide all sections
    elements.minimumOrderSection.style.display = 'none';
    elements.captchaValidationSection.style.display = 'none';
    elements.loadingSection.style.display = 'none';
    elements.successSection.style.display = 'none';
    elements.minimumOrderActions.style.display = 'none';
    elements.validationSuccessActions.style.display = 'none';

    // Show the requested section
    switch(sectionName) {
      case 'minimum-order':
        elements.minimumOrderSection.style.display = 'block';
        elements.minimumOrderActions.style.display = 'block';
        break;
      case 'captcha':
        elements.captchaValidationSection.style.display = 'block';
        break;
      case 'loading':
        elements.loadingSection.style.display = 'block';
        break;
      case 'success':
        elements.successSection.style.display = 'block';
        break;
    }
  }
  
  // Progress management functions
  function updateProgress(step, percentage) {
    if (elements.progressFill) {
      elements.progressFill.style.width = percentage + '%';
    }
    
    // Update step indicators
    [elements.step1, elements.step2, elements.step3].forEach((stepEl, index) => {
      if (stepEl) {
        stepEl.classList.remove('active', 'completed');
        if (index + 1 < step) {
          stepEl.classList.add('completed');
        } else if (index + 1 === step) {
          stepEl.classList.add('active');
        }
      }
    });
  }

  function updateMinimumOrderDisplay() {
    const remaining = state.minimumOrderValue - state.currentTotal;
    if (remaining > 0) {
      elements.amountNeededSection.style.display = 'flex';
      document.querySelector('.amount-needed').textContent = '$' + (remaining / 100).toFixed(2);
    } else {
      elements.amountNeededSection.style.display = 'none';
    }
  }

  async function startSecurityValidation() {
    elements.modalTitleText.textContent = 'Securing Your Checkout';
    showSection('captcha');
    updateProgress(1, 20);
    
    // Show initial loading state
    showValidationStatus('loading', 'üîç Checking cart', 'Validating your order details.');
    
    try {
      // Step 1: Cart validation
      await new Promise(resolve => setTimeout(resolve, 800)); // Smooth UX timing
      updateProgress(2, 50);
      
      const response = await fetch(`${CONFIG.API_BASE_URL}/validate-user`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          sessionId: state.sessionId,
          cartValue: state.currentTotal,
          cartItems: state.cartItems,
          userAgent: navigator.userAgent
        })
      });

      const result = await response.json();
      
      if (!response.ok) {
        throw new Error(result.error || 'Validation failed');
      }

      state.validationId = result.validationId;
      state.requiresCaptcha = result.requiresCaptcha;

      if (result.blocked) {
        showValidationStatus('error', 'üö´ Access Denied', 
          'Your request has been blocked due to security concerns. Please contact support if you believe this is an error.');
        return;
      }
      
      // Step 2: Show reCAPTCHA widget
      showValidationStatus('loading', 'üîê Security verification', 'Preparing security verification.');
      updateProgress(2, 70);
      
      // Show reCAPTCHA widget and handle auto-checking
      showCaptchaWidget(result);

    } catch (error) {
      console.error('Validation error:', error);
      showValidationStatus('error', '‚ùå Validation Service Unavailable', 
        'Please try again in a moment. If the problem persists, contact support.');
      
      // SECURITY: Never auto-approve on backend errors - show retry option
      setTimeout(() => {
        elements.manualVerification.style.display = 'block';
        const retryButton = document.createElement('button');
        retryButton.className = 'flsvalidation-btn flsvalidation-btn-primary';
        retryButton.textContent = 'Try Again';
        retryButton.onclick = () => {
          elements.manualVerification.style.display = 'none';
          startSecurityValidation();
        };
        elements.manualVerification.appendChild(retryButton);
      }, 1000);
    }
  }
  
  function showCaptchaWidget(validationResult) {
    // Show different messaging based on risk level (location removed from frontend display)
    if (validationResult.requiresCaptcha) {
      showValidationStatus('warning', 'üõ°Ô∏è Security Verification Required', 
        'Additional verification needed for secure checkout.');
    } else {
      showValidationStatus('loading', 'üîê Completing Security Verification', 
        'Processing your secure checkout verification automatically.');
    }
    
    // CRITICAL: Show the reCAPTCHA container
    elements.captchaContainer.style.display = 'block';
    elements.captchaSubmit.disabled = true;
    
    // Render reCAPTCHA widget
    renderRecaptchaWidget(validationResult.requiresCaptcha);
  }
  
  function renderRecaptchaWidget(requiresManualCheck = false) {
    // Wait for grecaptcha enterprise to be ready
    const checkRecaptcha = () => {
      if (typeof grecaptcha !== 'undefined' && grecaptcha.enterprise) {
        try {
          console.log('[reCAPTCHA] Rendering widget with key:', RECAPTCHA_SITE_KEY);
          
          // Render the checkbox widget
          window.flsvalidationRecaptchaWidgetId = grecaptcha.enterprise.render('flsvalidation-recaptcha-container', {
            'sitekey': RECAPTCHA_SITE_KEY,
            'callback': function(response) {
              onRecaptchaCallback(response, requiresManualCheck);
            },
            'expired-callback': onRecaptchaExpired,
            'error-callback': function(error) {
              console.error('[reCAPTCHA Enterprise] Error:', error);
              // If checkbox fails, try invisible fallback
              if (error.includes && error.includes('Invalid key type')) {
                console.log('[reCAPTCHA] Checkbox failed, trying invisible mode...');
                document.getElementById('flsvalidation-enterprise-fallback').style.display = 'block';
              } else {
                showManualVerification({});
              }
            },
            'theme': 'light',
            'size': 'normal'
          });
          
          console.log('[reCAPTCHA Enterprise] Checkbox widget rendered successfully');
          
          // If low risk, auto-complete the entire CAPTCHA process
          if (!requiresManualCheck) {
            setTimeout(() => {
              autoCompleteValidation();
            }, 1500); // Wait 1.5 seconds then auto-complete
          }
        } catch (error) {
          console.error('[reCAPTCHA Enterprise] Error rendering widget:', error);
          // If checkbox fails due to key type, try invisible mode
          if (error.message && error.message.includes('Invalid key type')) {
            console.log('[reCAPTCHA] Checkbox key type invalid, switching to invisible mode...');
            document.getElementById('flsvalidation-enterprise-fallback').style.display = 'block';
          } else {
            showManualVerification({});
          }
        }
      } else {
        // Retry after 500ms if grecaptcha enterprise not loaded yet
        setTimeout(checkRecaptcha, 500);
      }
    };
    
    checkRecaptcha();
  }
  
  async function handleEnterpriseVerify() {
    try {
      elements.enterpriseVerify.disabled = true;
      elements.enterpriseVerify.textContent = 'Verifying...';
      
      // Check if reCAPTCHA Enterprise is available
      if (typeof grecaptcha === 'undefined' || !grecaptcha.enterprise) {
        throw new Error('reCAPTCHA Enterprise not loaded');
      }
      
      if (!RECAPTCHA_SITE_KEY) {
        throw new Error('reCAPTCHA site key not loaded');
      }
      
      // Wait for grecaptcha.enterprise to be ready before executing
      await new Promise((resolve) => {
        grecaptcha.enterprise.ready(resolve);
      });
      
      const token = await grecaptcha.enterprise.execute(RECAPTCHA_SITE_KEY, {
        action: 'checkout_validation'
      });
      
      window.flsvalidationRecaptchaResponse = token;
      
      console.log('[reCAPTCHA Enterprise] Token obtained successfully');
      
      // Auto-submit the token
      await handleCaptchaSubmit();
      
    } catch (error) {
      console.error('Enterprise verify error:', error);
      elements.enterpriseVerify.disabled = false;
      elements.enterpriseVerify.textContent = 'Verify & Continue';
      showValidationStatus('error', '‚ùå Verification Failed', 
        'Unable to complete verification. Please try again.');
    }
  }
  
  function autoTickRecaptcha() {
    try {
      if (window.flsvalidationRecaptchaWidgetId !== null && grecaptcha && grecaptcha.enterprise) {
        // Programmatically execute the reCAPTCHA (this "ticks" the box)
        grecaptcha.enterprise.execute(window.flsvalidationRecaptchaWidgetId);
        
        if (CONFIG.DEBUG_MODE) {
          console.log('[reCAPTCHA] Auto-ticked checkbox');
        }
      }
    } catch (error) {
      console.error('[reCAPTCHA] Auto-tick failed:', error);
      // If auto-tick fails, user can still manually click
    }
  }

  async function autoCompleteValidation() {
    try {
      showValidationStatus('loading', 'üîê Completing verification automatically', 
        'Low risk detected - processing your secure checkout...');
      
      console.log('[reCAPTCHA] Auto-completing validation for low-risk user');
      
      // Use invisible reCAPTCHA for automatic token generation
      if (typeof grecaptcha !== 'undefined' && grecaptcha.enterprise && RECAPTCHA_SITE_KEY) {
        await grecaptcha.enterprise.ready();
        
        const token = await grecaptcha.enterprise.execute(RECAPTCHA_SITE_KEY, {
          action: 'checkout_validation'
        });
        
        if (token) {
          window.flsvalidationRecaptchaResponse = token;
          console.log('[reCAPTCHA] Auto-generated token for low-risk user');
          
          // Automatically submit the CAPTCHA
          await handleCaptchaSubmit();
        } else {
          throw new Error('Failed to generate auto-token');
        }
      } else {
        throw new Error('reCAPTCHA not available for auto-completion');
      }
    } catch (error) {
      console.error('[reCAPTCHA] Auto-completion failed:', error);
      console.log('[reCAPTCHA] Falling back to manual verification');
      
      // Fall back to showing manual CAPTCHA
      showValidationStatus('warning', 'üõ°Ô∏è Manual verification required', 
        'Please complete the verification manually.');
      elements.captchaContainer.style.display = 'block';
    }
  }
  
  function waitForRecaptcha() {
    return new Promise((resolve, reject) => {
      let attempts = 0;
      const maxAttempts = 20;
      
      const checkRecaptcha = () => {
        attempts++;
        if (typeof grecaptcha !== 'undefined' && grecaptcha.enterprise) {
          grecaptcha.enterprise.ready(resolve);
        } else if (attempts >= maxAttempts) {
          reject(new Error('reCAPTCHA failed to load'));
        } else {
          setTimeout(checkRecaptcha, 250);
        }
      };
      
      checkRecaptcha();
    });
  }
  
  async function executeInvisibleRecaptcha() {
    try {
      if (!RECAPTCHA_SITE_KEY) {
        throw new Error('Site key not available');
      }
      
      const token = await grecaptcha.enterprise.execute(RECAPTCHA_SITE_KEY, {
        action: 'checkout_validation'
      });
      
      if (CONFIG.DEBUG_MODE) {
        console.log('[reCAPTCHA] Auto-execution successful');
      }
      
      return token;
    } catch (error) {
      console.error('[reCAPTCHA] Auto-execution failed:', error);
      return null;
    }
  }
  
  async function submitCaptchaToken(token, validationResult) {
    try {
      const response = await fetch(`${CONFIG.API_BASE_URL}/verify-captcha`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          token: token,
          validationId: state.validationId,
          action: 'checkout_validation'
        })
      });
      
      const result = await response.json();
      
      if (response.ok && result.success && result.verified === true) {
        // Only proceed if explicitly verified by server
        showSuccessAndRedirect();
      } else if (result.requiresManualVerification) {
        // Risk score too low, show manual verification
        showManualVerification(validationResult);
      } else {
        throw new Error(result.error || 'Verification failed');
      }
    } catch (error) {
      console.error('Token verification failed:', error);
      // SECURITY: On verification failure, show error - never auto-approve
      showValidationStatus('error', '‚ùå Verification Failed', 
        'Security verification could not be completed. Please try again.');
      
      // Provide retry option instead of fallback
      setTimeout(() => {
        const retryContainer = document.createElement('div');
        retryContainer.innerHTML = `
          <button class="flsvalidation-btn flsvalidation-btn-primary" onclick="startSecurityValidation()">
            Try Again
          </button>
          <button class="flsvalidation-btn flsvalidation-btn-secondary" onclick="closeValidationModal()">
            Cancel
          </button>
        `;
        elements.validationStatus.appendChild(retryContainer);
      }, 1000);
    }
  }
  
  function showSuccessAndRedirect() {
    updateProgress(3, 100);
    showValidationStatus('success', '‚úÖ You\'re all set!', 'Verification complete. Redirecting to checkout...');
    
    // Show success section after a brief moment
    setTimeout(() => {
      showSection('success');
      
      // Auto-redirect after 1.5 seconds
      setTimeout(() => {
        proceedToShopifyCheckout();
      }, 1500);
    }, 800);
  }
  
  function showManualVerification(validationResult) {
    showValidationStatus('warning', 'üõ°Ô∏è Additional Verification Required', 
      'For your security, please complete this quick verification.');
    
    elements.manualVerification.style.display = 'block';
    
    // Render manual reCAPTCHA widget
    renderManualCaptchaWidget();
  }
  
  function renderManualCaptchaWidget() {
    try {
      if (elements.manualCaptcha && typeof grecaptcha !== 'undefined' && grecaptcha.enterprise) {
        // Try to render manual widget - handle key type compatibility
        window.flsvalidationManualWidgetId = grecaptcha.enterprise.render(elements.manualCaptcha, {
          'sitekey': RECAPTCHA_SITE_KEY,
          'callback': onManualRecaptchaCallback,
          'expired-callback': onManualRecaptchaExpired,
          'error-callback': function(error) {
            console.error('Manual reCAPTCHA error:', error);
            // If checkbox fails due to key type, show invisible fallback
            if (error.includes && error.includes('Invalid key type')) {
              showInvisibleFallback();
            } else {
              showVerificationError();
            }
          },
          'theme': 'light',
          'size': 'normal'
        });
      }
    } catch (error) {
      console.error('Failed to render manual reCAPTCHA:', error);
      // SECURITY: Never auto-proceed on reCAPTCHA failure
      showVerificationError();
    }
  }
  
  function showInvisibleFallback() {
    elements.manualCaptcha.innerHTML = `
      <div class="flsvalidation-invisible-fallback">
        <p>üîí Click to complete security verification</p>
        <button id="flsvalidation-invisible-execute" class="flsvalidation-btn flsvalidation-btn-primary">
          Complete Verification
        </button>
      </div>
    `;
    
    document.getElementById('flsvalidation-invisible-execute').onclick = async function() {
      this.disabled = true;
      this.textContent = 'Verifying...';
      try {
        const token = await executeInvisibleRecaptcha();
        if (token) {
          await submitCaptchaToken(token, {});
        } else {
          showVerificationError();
        }
      } catch (error) {
        showVerificationError();
      }
    };
  }
  
  function showVerificationError() {
    showValidationStatus('error', '‚ùå Verification Error', 
      'Unable to complete security verification. Please contact support if this continues.');
    
    // Provide contact support option instead of proceeding
    elements.manualVerification.innerHTML = `
      <div class="flsvalidation-support-contact">
        <p>If you continue experiencing issues, please contact our support team.</p>
        <button class="flsvalidation-btn flsvalidation-btn-secondary" onclick="closeValidationModal()">
          Close
        </button>
      </div>
    `;
  }
  
  // Main reCAPTCHA callback
  function onRecaptchaCallback(response, wasManualCheck) {
    if (CONFIG.DEBUG_MODE) {
      console.log('[reCAPTCHA] User completed verification, auto-check:', !wasManualCheck);
    }
    
    // Enable the submit button
    elements.captchaSubmit.disabled = false;
    window.flsvalidationRecaptchaResponse = response;
    
    // If this was an auto-check (low risk), automatically proceed
    if (!wasManualCheck) {
      elements.captchaSubmit.textContent = 'Proceeding...';
      setTimeout(() => {
        handleCaptchaSubmit();
      }, 800); // Small delay for smooth UX
    } else {
      // Manual check - user needs to click button
      elements.captchaSubmit.textContent = 'Continue to Checkout';
    }
  }
  
  function onRecaptchaExpired() {
    if (CONFIG.DEBUG_MODE) {
      console.log('[reCAPTCHA] Verification expired');
    }
    
    // Disable submit button
    elements.captchaSubmit.disabled = true;
    elements.captchaSubmit.textContent = 'Continue to Checkout';
    window.flsvalidationRecaptchaResponse = null;
  }
  
  async function handleCaptchaSubmit() {
    if (!window.flsvalidationRecaptchaResponse) {
      showValidationStatus('warning', '‚ö†Ô∏è Please complete verification', 
        'Please wait for the security check to complete.');
      return;
    }
    
    elements.captchaSubmit.disabled = true;
    elements.captchaSubmit.textContent = 'Verifying...';
    
    try {
      await submitCaptchaToken(window.flsvalidationRecaptchaResponse, {});
    } catch (error) {
      console.error('Captcha verification failed:', error);
      elements.captchaSubmit.disabled = false;
      elements.captchaSubmit.textContent = 'Continue to Checkout';
    }
  }
  
  // Manual reCAPTCHA callbacks
  window.onManualRecaptchaCallback = function(response) {
    elements.manualSubmit.disabled = false;
    window.flsvalidationManualResponse = response;
  };
  
  window.onManualRecaptchaExpired = function() {
    elements.manualSubmit.disabled = true;
    window.flsvalidationManualResponse = null;
  };
  
  async function handleManualCaptchaSubmit() {
    if (!window.flsvalidationManualResponse) {
      showValidationStatus('warning', '‚ö†Ô∏è Please complete the verification', 
        'Click the checkbox above to verify you are human.');
      return;
    }
    
    elements.manualSubmit.disabled = true;
    elements.manualSubmit.textContent = 'Verifying...';
    
    try {
      await submitCaptchaToken(window.flsvalidationManualResponse, {});
    } catch (error) {
      console.error('Manual verification failed:', error);
      elements.manualSubmit.disabled = false;
      elements.manualSubmit.textContent = 'Complete Verification';
      showValidationStatus('error', '‚ùå Verification Failed', 
        'Please try again or contact support if the issue persists.');
    }
  }

  // Legacy function - now handled by startAutoVerification
  function showCaptchaValidation(result) {
    // This is now handled automatically in startSecurityValidation
    startAutoVerification(result);
  }

  // Global variable to store widget ID
  window.flsvalidationRecaptchaWidgetId = null;
  
  function renderRecaptchaWidget() {
    // Wait for grecaptcha enterprise to be ready
    const checkRecaptcha = () => {
      if (typeof grecaptcha !== 'undefined' && grecaptcha.enterprise) {
        try {
          // DETECT KEY TYPE: Try checkbox first, fallback to invisible if "Invalid key type"
          console.log('[reCAPTCHA] Attempting to render widget with key:', RECAPTCHA_SITE_KEY);
          
          // Try Checkbox widget first (for new Checkbox keys)
          window.flsvalidationRecaptchaWidgetId = grecaptcha.enterprise.render('flsvalidation-recaptcha-container', {
            'sitekey': RECAPTCHA_SITE_KEY,
            'callback': onRecaptchaCallback,
            'expired-callback': onRecaptchaExpired,
            'error-callback': function(error) {
              console.error('[reCAPTCHA Enterprise] Checkbox error:', error);
              // If "Invalid key type", try invisible mode instead
              if (error.includes && error.includes('Invalid key type')) {
                console.log('[reCAPTCHA] Checkbox failed, trying invisible mode...');
                executeInvisibleRecaptcha();
              } else {
                onRecaptchaError(error);
              }
            },
            'theme': 'light',
            'size': 'normal'
          });
          
          if (CONFIG.DEBUG_MODE) {
            console.log('[reCAPTCHA Enterprise] Checkbox widget rendered successfully');
          }
        } catch (error) {
          console.error('[reCAPTCHA Enterprise] Error rendering checkbox widget:', error);
          // If checkbox fails, try invisible mode (for Score-based keys)
          if (error.message && error.message.includes('Invalid key type')) {
            console.log('[reCAPTCHA] Checkbox key type invalid, switching to invisible mode...');
            executeInvisibleRecaptcha();
          } else {
            // Show fallback UI
            document.getElementById('flsvalidation-enterprise-fallback').style.display = 'block';
          }
        }
      } else {
        // Retry after 500ms if grecaptcha enterprise not loaded yet
        setTimeout(checkRecaptcha, 500);
      }
    };
    
    checkRecaptcha();
  }
  
  // Callback when user completes reCAPTCHA
  window.onRecaptchaCallback = function(response) {
    if (CONFIG.DEBUG_MODE) {
      console.log('[reCAPTCHA] User completed verification');
    }
    
    // Enable the submit button
    elements.captchaSubmit.disabled = false;
    window.flsvalidationRecaptchaResponse = response;
  };
  
  // Callback when reCAPTCHA expires
  window.onRecaptchaExpired = function() {
    if (CONFIG.DEBUG_MODE) {
      console.log('[reCAPTCHA] Verification expired');
    }
    
    // Disable submit button
    elements.captchaSubmit.disabled = true;
    window.flsvalidationRecaptchaResponse = null;
  };
  
  // Callback when reCAPTCHA encounters an error
  window.onRecaptchaError = function() {
    if (CONFIG.DEBUG_MODE) {
      console.log('[reCAPTCHA] Error occurred');
    }
    
    showValidationStatus('error', '‚ùå reCAPTCHA Error', 
      'There was an error loading the verification. Please try again.');
  };

  function showValidationStatus(type, message, details = '') {
    elements.validationStatus.className = `flsvalidation-validation-status flsvalidation-${type}`;
    elements.validationMessage.textContent = message;
    elements.validationDetails.textContent = details;

    if (CONFIG.DEBUG_MODE) {
      console.log('[Cart Validation]', type, message, details);
    }
  }

  async function handleEnterpriseVerify() {
    try {
      elements.enterpriseVerify.disabled = true;
      elements.enterpriseVerify.textContent = 'Verifying...';
      
      // Check if reCAPTCHA Enterprise is available
      if (typeof grecaptcha === 'undefined' || !grecaptcha.enterprise) {
        throw new Error('reCAPTCHA Enterprise not loaded');
      }
      
      if (!RECAPTCHA_SITE_KEY) {
        throw new Error('reCAPTCHA site key not loaded');
      }
      
      // Wait for grecaptcha.enterprise to be ready before executing
      await new Promise((resolve) => {
        grecaptcha.enterprise.ready(resolve);
      });
      
      const token = await grecaptcha.enterprise.execute(RECAPTCHA_SITE_KEY, {
        action: 'checkout_validation'
      });
      
      window.flsvalidationRecaptchaResponse = token;
      
      if (CONFIG.DEBUG_MODE) {
        console.log('[reCAPTCHA Enterprise] Token obtained successfully');
      }
      
      // Automatically submit the captcha
      await handleCaptchaSubmit();
      
    } catch (error) {
      console.error('[reCAPTCHA Enterprise] Error:', error);
      elements.enterpriseVerify.disabled = false;
      elements.enterpriseVerify.textContent = 'Retry Verification';
      showValidationStatus('error', '‚ùå reCAPTCHA Enterprise Error', 
        error.message || 'Unable to complete verification. Please try again.');
    }
  }

  async function handleCaptchaSubmit() {
    try {
      // Check if we have a valid reCAPTCHA response
      if (!window.flsvalidationRecaptchaResponse) {
        showValidationStatus('error', '‚ùå reCAPTCHA Required', 
          'Please complete the reCAPTCHA verification before proceeding.');
        return;
      }

      elements.loadingText.textContent = 'Verifying reCAPTCHA...';
      elements.loadingSubtext.textContent = 'Please wait while we verify your response.';
      showSection('loading');

      const response = await fetch(`${CONFIG.API_BASE_URL}/captcha`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          validationId: state.validationId,
          captchaResponse: window.flsvalidationRecaptchaResponse,
          captchaType: 'recaptcha'
        })
      });

      const result = await response.json();

      if (result.success) {
        showValidationStatus('success', '‚úÖ Verification Complete', 
          'reCAPTCHA verified successfully. You may now proceed to checkout.');
        state.isValidated = true;
        
        // Track the validation success
        await trackCheckoutProceed();
        
        setTimeout(() => {
          proceedToShopifyCheckout();
        }, 2000);
      } else {
        showSection('captcha');
        showValidationStatus('error', '‚ùå Verification Failed', 
          'reCAPTCHA verification failed. Please try again.');
        
        // Reset reCAPTCHA Enterprise widget
        if (typeof grecaptcha !== 'undefined' && grecaptcha.enterprise && window.flsvalidationRecaptchaWidgetId !== null) {
          grecaptcha.enterprise.reset(window.flsvalidationRecaptchaWidgetId);
        }
        window.flsvalidationRecaptchaResponse = null;
        elements.captchaSubmit.disabled = true;
      }

    } catch (error) {
      console.error('reCAPTCHA verification error:', error);
      showSection('captcha');
      showValidationStatus('error', '‚ö†Ô∏è Verification Error', 
        'Unable to verify reCAPTCHA. Please try again or contact support.');
        
      // Reset reCAPTCHA widget on error
      if (typeof grecaptcha !== 'undefined' && window.flsvalidationRecaptchaWidgetId !== null) {
        grecaptcha.reset(window.flsvalidationRecaptchaWidgetId);
      }
      window.flsvalidationRecaptchaResponse = null;
      elements.captchaSubmit.disabled = true;
    }
  }

  async function trackCheckoutProceed() {
    try {
      await fetch(`${CONFIG.API_BASE_URL}/proceed-checkout`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          validationId: state.validationId,
          sessionId: state.sessionId
        })
      });
    } catch (error) {
      console.error('Failed to track checkout proceed:', error);
    }
  }

  function proceedToShopifyCheckout() {
    // Generate security token
    const timestamp = Date.now();
    const cartData = {
      total: state.currentTotal,
      items: state.cartItems,
      session: state.sessionId
    };
    const securityToken = btoa(JSON.stringify({ ...cartData, timestamp }));

    // Log checkout attempt for security monitoring
    console.log('[SECURITY] Checkout initiated with validation token:', securityToken.slice(0, 20) + '...');

    // Redirect to Shopify checkout
    window.location.href = '/checkout';
  }

  // Quantity monitoring (from your existing code)
  function setupQuantityMonitoring() {
    const quantityInputs = document.querySelectorAll('.quantity-input');
    const updateCartBtn = document.getElementById('update-cart-btn');
    const updateCartIndicator = document.getElementById('update-cart-indicator');

    quantityInputs.forEach(input => {
      const originalValue = input.dataset.originalValue;

      input.addEventListener('input', function() {
        const currentValue = this.value;
        const hasChanged = currentValue !== originalValue;

        if (hasChanged) {
          state.cartChanged = true;
          this.classList.add('changed');
          showUpdateIndicator();
          setupAutoReload();
        } else {
          this.classList.remove('changed');
          checkIfAnyChanges();
        }
      });
    });

    function showUpdateIndicator() {
      if (updateCartBtn) {
        updateCartBtn.classList.add('cart-changed');
      }
      if (updateCartIndicator) {
        updateCartIndicator.style.display = 'block';
      }
    }

    function checkIfAnyChanges() {
      const changedInputs = document.querySelectorAll('.quantity-input.changed');
      if (changedInputs.length === 0) {
        state.cartChanged = false;
        if (updateCartBtn) {
          updateCartBtn.classList.remove('cart-changed');
        }
        if (updateCartIndicator) {
          updateCartIndicator.style.display = 'none';
        }
        clearAutoReload();
      }
    }

    function setupAutoReload() {
      clearAutoReload();
      state.autoReloadTimer = setTimeout(() => {
        if (state.cartChanged) {
          console.log('Auto-reloading cart due to changes...');
          const cartForm = document.getElementById('enhanced-cart-form');
          if (cartForm) {
            cartForm.submit();
          }
        }
      }, 5000);
    }

    function clearAutoReload() {
      if (state.autoReloadTimer) {
        clearTimeout(state.autoReloadTimer);
        state.autoReloadTimer = null;
      }
    }
  }

  // Global functions for modal controls
  window.closeValidationModal = function() {
    elements.validationModal.style.display = 'none';
    document.body.style.overflow = 'auto';
  };

  window.continueShoppingFromModal = function() {
    closeValidationModal();
    window.location.href = '/collections/all';
  };

  window.proceedToShopifyCheckout = proceedToShopifyCheckout;

  // Security features (from your existing code)
  document.addEventListener('keydown', function(e) {
    if (e.key === 'F12' || 
        (e.ctrlKey && e.shiftKey && (e.key === 'I' || e.key === 'C' || e.key === 'J')) ||
        (e.ctrlKey && e.key === 'U')) {
      e.preventDefault();
      console.warn('[SECURITY] Developer tools access attempt detected');
    }
  });

  // Monitor for tampering attempts
  const originalConsoleLog = console.log;
  console.log = function(...args) {
    if (args.some(arg => typeof arg === 'string' && arg.includes('minimum'))) {
      console.warn('[SECURITY] Potential tampering attempt detected');
    }
    originalConsoleLog.apply(console, args);
  };
});
</script>

<!-- END INTEGRATED SHOPIFY CART VALIDATION -->